## chapter 08_ 시간복잡도(time complexity)
# 시간 복잡도: 알고리즘 실행 속도
# 공간 복잡도: 알고리즘이 사용하는 메모리 사이즈

# 시간복잡도
# 입력의 크기가 커지면 커질수록 반복문이 알고리즘 수행 시간을 지배함

# 알고리즘 성능 표기법
# Big O (빅-오) 표기법: O(N)
#
# 알고리즘 최악의 실행 시간을 표기
# 가장 많이/일반적으로 사용함
# 아무리 최악의 상황이라도, 이정도의 성능은 보장한다는 의미이기 때문
# Ω (오메가) 표기법: Ω(N)
#
# 오메가 표기법은 알고리즘 최상의 실행 시간을 표기
# Θ (세타) 표기법: Θ(N)
#
# 오메가 표기법은 알고리즘 평균 실행 시간을 표기
# 시간 복잡도 계산은 반복문이 핵심 요소임을 인지하고, 계산 표기는 최상, 평균, 최악 중, 최악의 시간인 Big-O 표기법을 중심으로 익히면 됨




# 빅 오 표기법, Big-O 표기법 이라고도 부름
#
# O(입력)
#
# 입력 n 에 따라 결정되는 시간 복잡도 함수
# O(1), O( 𝑙𝑜𝑔𝑛 ), O(n), O(n 𝑙𝑜𝑔𝑛 ), O( 𝑛2 ), O( 2𝑛 ), O(n!)등으로 표기함
# 입력 n 의 크기에 따라 기하급수적으로 시간 복잡도가 늘어날 수 있음
# O(1) < O( 𝑙𝑜𝑔𝑛 ) < O(n) < O(n 𝑙𝑜𝑔𝑛 ) < O( 𝑛2 ) < O( 2𝑛 ) < O(n!)
# 참고: log n 의 베이스는 2 -  𝑙𝑜𝑔2𝑛
# 단순하게 입력 n에 따라, 몇번 실행이 되는지를 계산하면 됩니다.
#
# 표현식에 가장 큰 영향을 미치는 n 의 단위로 표기합니다.
# n이 1이든 100이든, 1000이든, 10000이든 실행을
# 무조건 2회(상수회) 실행한다: O(1)
#       if n > 10:
#            print(n)
# n에 따라, n번, n + 10 번, 또는 3n + 10 번등 실행한다: O(n)
#       variable = 1
#       for num in range(3):
#           for index in range(n):
#                print(index)
# n에 따라,  𝑛2 번,  𝑛2  + 1000 번, 100 𝑛2  - 100, 또는 300 𝑛2  + 1번등 실행한다: O( 𝑛2 )
#       variable = 1
#       for i in range(300):
#           for num in range(n):
#               for index in range(n):
#                    print(index)

## 연습1: 1부터 n까지의 합을 구하는 알고리즘 작성해보기
# 입력 n에 따라 덧셈을 n 번 해야 함 (반복문!)
# 시간 복잡도: n, 빅 오 표기법으로는 O(n)
def sum(n):
    result = 0
    for index in range(1, n+1):
        result += index

    print("1부터 n까지의 합 = ", result)

sum(100)

## 연습2: 1부터 n까지의 합을 구하는 알고리즘2
# 시간 복잡도: 1, 빅 오 표기법으로는 O(1)
def sum_type2(n):
    return (int((n)*(n+1)/2))

print(sum_type2(100))